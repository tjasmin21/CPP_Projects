///////////////////////////////////////////////////////////////////////////////
// Demo: CPP-02.03D: Copy Constructor / Assignment Operator                  //
///////////////////////////////////////////////////////////////////////////////

#include <iostream>
using namespace std;



///////////////////////////////////////////////////////////////////////////////
// class CPoint declaration and definition (implementation) of class point
///////////////////////////////////////////////////////////////////////////////
class CPoint
///////////////////////////////////////////////////////////////////////////////
{
public:
   int iX;
   int iY;

   // construction
   CPoint(int x=0, int y=0) : iX(x), iY(y) {};
};


///////////////////////////////////////////////////////////////////////////////
// class declaration and implementation of class circle
///////////////////////////////////////////////////////////////////////////////
class CCircle
///////////////////////////////////////////////////////////////////////////////
{
public:
    int     iRadius;
    CPoint* pP1;

    CCircle() : iRadius(0), pP1(new CPoint()) {};
    CCircle(int r, int x, int y) : iRadius(r),  pP1(new CPoint(x,y)) {};

    // copy constructor
    //CCircle(const CCircle& pSource); // reference param on the object to copy
    //CCircle(const CCircle&) = delete;
    // assignment operator
    //CCircle& operator= (const CCircle& pSource);
    //void operator= (const CCircle& pSource);

    // functions
    void Move(int x, int y);
    void List();
}; // End class definition with semicolon


/*/////////////////////////////////////////////////////////////////////////////
// copy constructor (deep copy)
///////////////////////////////////////////////////////////////////////////////
CCircle::CCircle(const CCircle& pSource)
///////////////////////////////////////////////////////////////////////////////
{
	iRadius = pSource.iRadius;
	pP1 = new CPoint(); // deep copy
	pP1->iX = pSource.pP1->iX;
	pP1->iY = pSource.pP1->iY;
}
// */


/*/////////////////////////////////////////////////////////////////////////////
// assignment operator
///////////////////////////////////////////////////////////////////////////////
CCircle& CCircle::operator=(const CCircle& pSource)
///////////////////////////////////////////////////////////////////////////////
{
	iRadius = pSource.iRadius;
	pP1->iX = pSource.pP1->iX;
	pP1->iY = pSource.pP1->iY;
    return *this;
}
// */


/*/////////////////////////////////////////////////////////////////////////////
// assignment operator
///////////////////////////////////////////////////////////////////////////////
void CCircle::operator=(const CCircle& pSource)
///////////////////////////////////////////////////////////////////////////////
{
	iRadius = pSource.iRadius;
	pP1->iX = pSource.pP1->iX;
	pP1->iY = pSource.pP1->iY;
}
// */


///////////////////////////////////////////////////////////////////////////////
void CCircle::Move(int x, int y)
///////////////////////////////////////////////////////////////////////////////
{
    pP1->iX += x;
    pP1->iY += y;
}


///////////////////////////////////////////////////////////////////////////////
void CCircle::List()
///////////////////////////////////////////////////////////////////////////////
{
   cout << " &Point  = 0x" << pP1 << endl;
   cout << " Radius  = "   << iRadius << endl;
   cout << " Point x = "   << pP1->iX << endl;
   cout << " Point y = "   << pP1->iY << endl;
}


///////////////////////////////////////////////////////////////////////////////
int main()
///////////////////////////////////////////////////////////////////////////////
{
   // construct first circle object
   cout << "--> Create Circle1 ..." << endl << endl;
   CCircle C1(100, 10, 50);

   cout << "Circle1:" << endl;
   C1.List();

   // construct second circle object using direct initialisation
   cout << endl << "--> Create Circle2 ..." << endl << endl;
   CCircle C2(C1);
   //CCircle C2 = C1;

   // construct second circle object with assignment operator
   //CCircle C2;
   // C2 = C1;
   // C2.operator=(C1);
   // CCircle C3;
   // C3 = C2 = C1;
   // C3.operator=(C2.operator=(C1));

   cout << "Circle1:" << endl;
   C1.List();
   cout << "Circle2:" << endl;
   C2.List();

   // move circle 1
   cout << endl << "--> Move Circle1 ..." << endl << endl;
   C1.Move(90, 50);

   cout << "Circle1:" << endl;
   C1.List();
   cout << "Circle2:" << endl;
   C2.List();

   return 0;
}
